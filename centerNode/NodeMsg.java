/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'NodeMsg'
 * message type.
 */

public class NodeMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 21;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 0;

    /** Create a new NodeMsg of size 21. */
    public NodeMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new NodeMsg of the given data_length. */
    public NodeMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeMsg with the given data_length
     * and base offset.
     */
    public NodeMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeMsg using the given byte array
     * as backing store.
     */
    public NodeMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public NodeMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public NodeMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeMsg embedded in the given message
     * at the given base offset.
     */
    public NodeMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new NodeMsg embedded in the given message
     * at the given base offset and length.
     */
    public NodeMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <NodeMsg> \n";
      try {
        s += "  [groupid=0x"+Long.toHexString(get_groupid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [max=0x"+Long.toHexString(get_max())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [min=0x"+Long.toHexString(get_min())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sum=0x"+Long.toHexString(get_sum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [average=0x"+Long.toHexString(get_average())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [median=0x"+Long.toHexString(get_median())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: groupid
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'groupid' is signed (false).
     */
    public static boolean isSigned_groupid() {
        return false;
    }

    /**
     * Return whether the field 'groupid' is an array (false).
     */
    public static boolean isArray_groupid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'groupid'
     */
    public static int offset_groupid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'groupid'
     */
    public static int offsetBits_groupid() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'groupid'
     */
    public short get_groupid() {
        return (short)getUIntBEElement(offsetBits_groupid(), 8);
    }

    /**
     * Set the value of the field 'groupid'
     */
    public void set_groupid(short value) {
        setUIntBEElement(offsetBits_groupid(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'groupid'
     */
    public static int size_groupid() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'groupid'
     */
    public static int sizeBits_groupid() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: max
    //   Field type: long, unsigned
    //   Offset (bits): 8
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'max' is signed (false).
     */
    public static boolean isSigned_max() {
        return false;
    }

    /**
     * Return whether the field 'max' is an array (false).
     */
    public static boolean isArray_max() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'max'
     */
    public static int offset_max() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'max'
     */
    public static int offsetBits_max() {
        return 8;
    }

    /**
     * Return the value (as a long) of the field 'max'
     */
    public long get_max() {
        return (long)getUIntBEElement(offsetBits_max(), 32);
    }

    /**
     * Set the value of the field 'max'
     */
    public void set_max(long value) {
        setUIntBEElement(offsetBits_max(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'max'
     */
    public static int size_max() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'max'
     */
    public static int sizeBits_max() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: min
    //   Field type: long, unsigned
    //   Offset (bits): 40
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'min' is signed (false).
     */
    public static boolean isSigned_min() {
        return false;
    }

    /**
     * Return whether the field 'min' is an array (false).
     */
    public static boolean isArray_min() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'min'
     */
    public static int offset_min() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'min'
     */
    public static int offsetBits_min() {
        return 40;
    }

    /**
     * Return the value (as a long) of the field 'min'
     */
    public long get_min() {
        return (long)getUIntBEElement(offsetBits_min(), 32);
    }

    /**
     * Set the value of the field 'min'
     */
    public void set_min(long value) {
        setUIntBEElement(offsetBits_min(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'min'
     */
    public static int size_min() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'min'
     */
    public static int sizeBits_min() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sum
    //   Field type: long, unsigned
    //   Offset (bits): 72
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sum' is signed (false).
     */
    public static boolean isSigned_sum() {
        return false;
    }

    /**
     * Return whether the field 'sum' is an array (false).
     */
    public static boolean isArray_sum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sum'
     */
    public static int offset_sum() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sum'
     */
    public static int offsetBits_sum() {
        return 72;
    }

    /**
     * Return the value (as a long) of the field 'sum'
     */
    public long get_sum() {
        return (long)getUIntBEElement(offsetBits_sum(), 32);
    }

    /**
     * Set the value of the field 'sum'
     */
    public void set_sum(long value) {
        setUIntBEElement(offsetBits_sum(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'sum'
     */
    public static int size_sum() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sum'
     */
    public static int sizeBits_sum() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: average
    //   Field type: long, unsigned
    //   Offset (bits): 104
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'average' is signed (false).
     */
    public static boolean isSigned_average() {
        return false;
    }

    /**
     * Return whether the field 'average' is an array (false).
     */
    public static boolean isArray_average() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'average'
     */
    public static int offset_average() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'average'
     */
    public static int offsetBits_average() {
        return 104;
    }

    /**
     * Return the value (as a long) of the field 'average'
     */
    public long get_average() {
        return (long)getUIntBEElement(offsetBits_average(), 32);
    }

    /**
     * Set the value of the field 'average'
     */
    public void set_average(long value) {
        setUIntBEElement(offsetBits_average(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'average'
     */
    public static int size_average() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'average'
     */
    public static int sizeBits_average() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: median
    //   Field type: long, unsigned
    //   Offset (bits): 136
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'median' is signed (false).
     */
    public static boolean isSigned_median() {
        return false;
    }

    /**
     * Return whether the field 'median' is an array (false).
     */
    public static boolean isArray_median() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'median'
     */
    public static int offset_median() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'median'
     */
    public static int offsetBits_median() {
        return 136;
    }

    /**
     * Return the value (as a long) of the field 'median'
     */
    public long get_median() {
        return (long)getUIntBEElement(offsetBits_median(), 32);
    }

    /**
     * Set the value of the field 'median'
     */
    public void set_median(long value) {
        setUIntBEElement(offsetBits_median(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'median'
     */
    public static int size_median() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'median'
     */
    public static int sizeBits_median() {
        return 32;
    }

}
